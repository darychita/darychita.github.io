{"version":3,"sources":["QuestionHeader.jsx","Variants.jsx","AnswerButtons.jsx","Question.jsx","DataServiceContext.js","withData.jsx","Spinner.jsx","Game.jsx","utils.js","DataService.js","App.js","index.js"],"names":["useStyles","makeStyles","root","color","marginBottom","textAlign","transform","fontWeight","QuestionHeader","text","styles","Typography","variant","component","className","backgroundColor","height","width","marginLeft","textTransform","Variants","number","letter","cardNumber","Math","floor","random","Grid","container","spacing","map","el","item","xs","key","Card","style","background","CardContent","align","AnswerButtons","onAnswer","Button","size","onClick","Question","this","props","questionText","onQuestionAnswered","answerOptions","Component","React","createContext","DataProvider","Provider","DataConsumer","Consumer","withData","View","dataService","Spinner","CircularProgress","position","top","left","state","question","answer","gameResult","correct","incorrect","result","isCorrect","validateAnswer","setState","updateGame","getRandomQuestion","getRandomVariant","min","max","charCode","char","String","charCodeAt","DataService","Set","validator","type","_getRandomNumber","_getRandomLetter","a","b","fromCharCode","questionNum","length","answerOption","validationMethod","_isEven","num","_isOdd","_isVowel","has","toLowerCase","_isConsonant","App","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eeaa1f36.chunk.js","sourcesContent":["import React from 'react';\nimport 'fontsource-roboto';\nimport { Typography, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n        color: '#fff',\n        marginBottom: '40px',\n        textAlign: 'center',\n        transform: 'scale(1.1)',\n        fontWeight: '500'    \n    }\n});\n\nconst QuestionHeader = ({text = 'Bla bla'}) => {\n    const styles = useStyles();\n    return (\n        <Typography variant=\"h2\" component=\"h2\" className={styles.root}>\n            {text}\n        </Typography>\n    ); \n};  \n\nexport default QuestionHeader;","import React from 'react';\nimport { Grid, Typography, Card, CardContent, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: 'rgba(0, 0, 0, 0.2)',\n        color: 'white',\n        height: '100px',\n        width: '60%',\n        marginLeft: '20%',\n        textTransform: 'uppercase'\n    }\n});\nconst Variants = ({number, letter}) => {\n    const styles = useStyles();\n\n    const cardNumber = Math.floor(Math.random() * 4);\n    return (\n        <div className=\"cards\">\n            <Grid container spacing={3}>\n                {\n                    [0, 1, 2, 3].map((el) => {\n                        return (\n                            <Grid item xs={6} key={el}>\n                                <Card \n                                    className={styles.root}\n                                    style={{\n                                        background: el !== cardNumber ? \"rgba(0, 0, 0, 0.05)\" : \"rgba(0, 0, 0, 0.25)\"\n                                    }}\n                                    variant={el !== cardNumber ? \"outlined\" : \"elevation\"}>\n                                    <CardContent>\n                                        {\n                                            el === cardNumber ? (\n                                                <Typography variant=\"h2\" component=\"h2\" align=\"center\">\n                                                    {letter}{number}\n                                                </Typography>\n                                            ) \n                                            : null\n                                        }\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n        </div>\n    );\n};\n\nexport default Variants;\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport './AnswerButtons.css';\n\nconst AnswerButtons = ({onAnswer}) => {\n    return (\n        <div className=\"buttons\">\n            <Button \n                variant=\"outlined\" \n                size=\"large\" \n                color=\"secondary\"\n                onClick={() => onAnswer(false)}\n            >\n                Нет\n            </Button>\n            <Button \n                variant=\"contained\"  \n                size=\"large\" \n                color=\"secondary\"\n                onClick={() => onAnswer(true)}\n            >\n                Да\n            </Button>\n        </div>\n    );\n};\n\nexport default AnswerButtons;","import React, { Component } from 'react';\nimport QuestionHeader from './QuestionHeader';\nimport Variants from './Variants';\nimport AnswerButtons from './AnswerButtons';\n\nclass Question extends Component {\n\n    \n    render() {\n        const { questionText, onQuestionAnswered, ...answerOptions } = this.props;\n        \n        return (\n            <div className=\"game\">\n                <QuestionHeader text={questionText}/>\n                <Variants {...answerOptions} />\n                <AnswerButtons onAnswer={onQuestionAnswered}/>\n            </div>\n\n        );\n    }\n};\n\nexport default Question;","import React from 'react';\n\nconst {\n    Provider: DataProvider,\n    Consumer: DataConsumer \n} = React.createContext();\n\nexport {\n    DataConsumer,\n    DataProvider\n};\n\n","import React from 'react';\nimport { DataConsumer } from './DataServiceContext';\n\nconst withData = (View) => {\n    return (props) => {\n        return (\n            <DataConsumer>\n                {\n                    (dataService) => {\n                        return (\n                            <View {...props} dataService={dataService} />\n                        );\n                    }\n                }\n            </DataConsumer>\n        )\n    };\n};\n\nexport default withData;\n","import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nconst Spinner = () => {\n    return <CircularProgress color=\"secondary\" style={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%'\n    }} />\n\n};\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport Question from './Question';\nimport withData from './withData';\nimport Spinner from './Spinner';\n\nclass Game extends Component {\n    state = {\n        question: null,\n        answer: null,\n        gameResult: {\n            correct: 0,\n            incorrect: 0\n        } \n    };\n\n    updateGame() {\n        const { dataService } = this.props;\n        this.setState({\n            question: dataService.getRandomQuestion(),\n            answer: dataService.getRandomVariant()\n        });\n    }\n\n    componentDidMount() {\n        this.updateGame();\n    }\n\n    /** answer - boolean */\n    onQuestionAnswered = (result) => {\n        const correctAnswer = this.props.dataService.validateAnswer(this.state.question, this.state.answer);\n        const isCorrect = result === correctAnswer;\n        this.setState((state) => {\n            const { gameResult } = state;\n            if(isCorrect) {\n                gameResult.correct += 1\n            } else {\n                gameResult.incorrect += 1\n            }\n        });\n        this.updateGame();\n    };\n \n\n    render() {\n        const { question, answer } = this.state;\n        if(!question) {\n            return <Spinner />\n        }\n        return (            \n            <Question \n                {...answer} \n                questionText={question.text}\n                onQuestionAnswered={this.onQuestionAnswered}\n            />\n        );\n    }   \n\n};\n\nexport default withData(Game);\n","export const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport const charCode = (char) => {\n    return String(char).charCodeAt(0);\n};","import { random, charCode } from './utils';\n\nclass DataService {\n    #vowels = new Set(['а', 'е', 'и', 'о', 'у', 'ы', 'э', 'ю', 'я']);\n    #consonants = new Set(['б', 'в', 'г', 'д', 'ж', 'з', 'й', 'к', 'л', 'м', 'н', 'п', 'р', 'с', 'т', 'ф', 'х', 'ц', 'ч', 'ш', 'щ']);\n    #minNum = 1;\n    #maxNum = 9;\n    #questions = [\n        { text: 'Число парное?', validator: 'isEven', type: 'num' },\n        { text: 'Число непарное?', validator: 'isOdd', type: 'num'},\n        { text: 'Буква гласная?', validator: 'isVowel', type: 'letter'},\n        { text: 'Буква согласная?', validator: 'isConsonant', type: 'letter'}\n    ];\n\n    _getRandomNumber = () => {\n        return random(this.#minNum, this.#maxNum);\n    }\n\n    _getRandomLetter = () => {\n        const a = charCode('а');\n        const b = charCode('я');\n        return String.fromCharCode(random(a, b));\n    }\n\n    getRandomQuestion = () => {\n        const questionNum = random(0, this.#questions.length);\n        return this.#questions[questionNum];\n    };\n\n    getRandomVariant = () => {\n        return {\n            letter: this._getRandomLetter(),\n            number: this._getRandomNumber()\n        };\n    };\n\n    validateAnswer = (question, answer) => {\n        const { validator, type } = question;\n        const answerOption = answer[type];\n        const validationMethod = this[`_${validator}`];\n        return validationMethod(answerOption);\n    };\n\n    _isEven = (num) => {\n        return num % 2 === 0;\n    }\n\n    _isOdd = (num) => {\n        return num % 2 !== 0;\n    }\n\n    _isVowel = (letter) => {\n        return this.#vowels.has(letter.toLowerCase());\n    }\n\n    _isConsonant = (letter) => {\n        return this.#consonants.has(letter.toLowerCase())\n    }\n\n}\n\nexport default DataService;","import React from 'react';\nimport './App.css';\nimport 'fontsource-roboto';\nimport Game from './Game';\nimport { DataProvider } from './DataServiceContext';\nimport DataService from './DataService';\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <DataProvider value={new DataService()}>\n                <Game />\n            </DataProvider>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}